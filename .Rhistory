X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .001,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .01,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .001,
kernel_x = "rbf", degree_x = 3, gamma_x = .01,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", degree_x = 3, gamma_x = .01,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 100, gamma = .01,
kernel_x = "rbf", degree_x = 3, gamma_x = .01,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", degree_x = 3, gamma_x = .01,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .01,
tol = .000001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", gamma_x = .001,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
print(length(y_predict[y_predict == y_test]))
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", gamma_x = .0001,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 1, gamma = .01,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 1, gamma = .01,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 1, gamma = .01,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .0000001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 1, gamma = .0001,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .0000001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
qp = SVMP(cost = 100, gamma = .0001,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .0000001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
y_predict
XStar
i=1
norm(X1[i,] - mean1, type = "2")
norm(X2[i,] - mean2, type = "2")
mean1 = rep(0, 2)
mean2 = rep(1, 2)
cov2  = cov1 = .5 * diag(2)
n = 20
X1 = mvrnorm(n, mean1, Sigma = cov1)
X2 = mvrnorm(n, mean2, Sigma = cov2)
X_train = rbind(X1, X2)
y_train = matrix(c(rep(1, n), rep(-1, n)), 2*n, 1)
X1Star = matrix(0, n, 2)
X2Star = matrix(0, n, 2)
for(i in 1:n)
{
X1Star[i, 0] = norm(X1[i,] - mean1, type = "2")
X1Star[i, 1] = norm(X2[i,] - mean2, type = "2")
}
for(i in 1:n)
{
X2Star[i, 0] = norm(X1[i, ] - mean2, type = "2")
X2Star[i, 1] = norm(X2[i, ] - mean1, type = "2")
}
XStar = rbind(X1Star, X2Star)
XStar
X1Star
mean1 = rep(0, 2)
mean2 = rep(1, 2)
cov2  = cov1 = .5 * diag(2)
n = 20
X1 = mvrnorm(n, mean1, Sigma = cov1)
X2 = mvrnorm(n, mean2, Sigma = cov2)
X_train = rbind(X1, X2)
y_train = matrix(c(rep(1, n), rep(-1, n)), 2*n, 1)
X1Star = matrix(0, n, 2)
X2Star = matrix(0, n, 2)
for(i in 1:n)
{
X1Star[i, 1] = norm(X1[i,] - mean1, type = "2")
X1Star[i, 2] = norm(X2[i,] - mean2, type = "2")
}
for(i in 1:n)
{
X2Star[i, 1] = norm(X1[i, ] - mean2, type = "2")
X2Star[i, 2] = norm(X2[i, ] - mean1, type = "2")
}
XStar = rbind(X1Star, X2Star)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
qp = SVMP(cost = 100, gamma = .0001,
kernel_x = "rbf", gamma_x = .00001,
kernel_xstar = "rbf", gamma_xstar = .0000001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
qp = SVMP(cost = 10, gamma = .001,
kernel_x = "rbf", gamma_x = .001,
kernel_xstar = "rbf", gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
XStar
qp = SVMP(cost = 10, gamma = .01,
kernel_x = "rbf", gamma_x = .001,
kernel_xstar = "rbf", gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 100, gamma = .01,
kernel_x = "rbf", gamma_x = .001,
kernel_xstar = "rbf", gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
qp = SVMP(cost = 100, gamma = .1,
kernel_x = "rbf", gamma_x = .001,
kernel_xstar = "rbf", gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
y_train
y_test
y_predict
data("iris")
dim(iris)
head(iris)
#let us have 30 observations from each class for training
X_train = rbind(iris[1:30, 1:4],
iris[51:80, 1:4],
iris[101:130, 1:4])
y_train = c(rep(1,30), rep(2,30), rep(3,30))
y_train = matrix(y_train, 90,1)
XStar = diag(90) # Identity matrix as PI
qp = SVMP(cost = 1, gamma = .01,
kernel_x = "rbf", degree_x = 3, gamma_x = .001,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
X_test = rbind(iris[31:50, 1:4],
iris[81:100, 1:4],
iris[131:150, 1:4])
y_test = c(rep(1,20), rep(2,20), rep(3,20))
y_test = matrix(y_test, 60, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 60")
qp = svmPlus(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .0019,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .0568,
tol = .00001)
X1 = rbind(c(3,1), c(3,-1), c(5,1), c(5,-1))
X2 = rbind(c(1,0), c(0,1), c(0,-1), c(-1,0))
qp = SVMP(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .0019,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .0568,
tol = .00001)
X1 = rbind(c(3,1), c(3,-1), c(5,1), c(5,-1))
X2 = rbind(c(1,0), c(0,1), c(0,-1), c(-1,0))
X3 = rbind(c(1,10), c(3,11))
X_train = rbind(X1,X2)
X_train = rbind(X_train, X3)
plot(X_train)
y_train = matrix(c(1,1,1,1,2,2,2,2,3,3), 10, 1)
XStar = diag(10)
X_test = rbind(c(3,0), c(5,0), c(4,0), c(4,1),
c(0, 0), c(-1,-2), c(1,2), c(1,-2))
y_test = matrix(c(1,1,1,1, 2, 2, 2, 2), 8, 1)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
#print(y_predict)
correct = length(y_predict[y_predict == y_test,])
print("# correct predictions = ")
print(correct)
mean1 = rep(0, 2)
mean2 = rep(1, 2)
cov2  = cov1 = .5 * diag(2)
n = 20
X1 = mvrnorm(n, mean1, Sigma = cov1)
X2 = mvrnorm(n, mean2, Sigma = cov2)
X_train = rbind(X1, X2)
y_train = matrix(c(rep(1, n), rep(-1, n)), 2*n, 1)
X1Star = matrix(0, n, 2)
X2Star = matrix(0, n, 2)
for(i in 1:n)
{
X1Star[i, 1] = norm(X1[i,] - mean1, type = "2")
X1Star[i, 2] = norm(X2[i,] - mean2, type = "2")
}
for(i in 1:n)
{
X2Star[i, 1] = norm(X1[i, ] - mean2, type = "2")
X2Star[i, 2] = norm(X2[i, ] - mean1, type = "2")
}
XStar = rbind(X1Star, X2Star)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
qp = SVMP(cost = 100, gamma = .01,
kernel_x = "rbf", gamma_x = .01,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
library(svmplus)
testSvmPlus = function()
{
#library(svmplus)
qp = svmPlus(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .0019,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .0568,
tol = .00001)
#X = 2*diag(3)
#X_test = 3*diag(3)
#magic five matrix
X_train = rbind(c(17, 24,  1,  8, 15),
c(23,  5,  7, 14, 16),
c(4,  6, 13, 20, 22),
c(10, 12, 19, 21,  3),
c(11, 18, 25,  2,  9))
y_train = matrix(c(1, 1, -1, 1, -1), 5,1)
XStar = diag(5)
XStar[1, 1] = 1
XStar[2, 2] = 2
XStar[3, 3] = 3
XStar[4, 4] = 4
XStar[5,5] = 5
#or
X1 = rbind(c(3,1), c(3,-1), c(5,1), c(5,-1))
X2 = rbind(c(1,0), c(0,1), c(0,-1), c(-1,0))
X_train = rbind(X1,X2)
y_train = matrix(c(1,1,1,1,-1,-1,-1,-1), 8, 1)
XStar = diag(8)
X_test = rbind(c(2,1), c(2,-1), c(6,1), c(6,-1),
c(1,-1), c(-1,1), c(-1,-1), c(1,1))
y_test = matrix(c(1,1,1,1, -1, -1, -1, -1), 8, 1)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(y_predict)
correct = length(y_predict[y_predict == y_test,])
print("# correct predictions = ")
print(correct)
}
testSvmPlus
testSvmPlus()
test3Class = function()
{
qp = SVMP(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .0019,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .0568,
tol = .00001)
X1 = rbind(c(3,1), c(3,-1), c(5,1), c(5,-1))
X2 = rbind(c(1,0), c(0,1), c(0,-1), c(-1,0))
X3 = rbind(c(1,10), c(3,11))
X_train = rbind(X1,X2)
X_train = rbind(X_train, X3)
plot(X_train)
y_train = matrix(c(1,1,1,1,2,2,2,2,3,3), 10, 1)
XStar = diag(10)
X_test = rbind(c(3,0), c(5,0), c(4,0), c(4,1),
c(0, 0), c(-1,-2), c(1,2), c(1,-2))
y_test = matrix(c(1,1,1,1, 2, 2, 2, 2), 8, 1)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
#print(y_predict)
correct = length(y_predict[y_predict == y_test,])
print("# correct predictions = ")
print(correct)
#y_predict = qp$predict(X_train)
#correct = length(y_predict[y_predict == y_train,])
#print("# correct predictions = ")
#print(correct)
}
test3Class()
demo_mnist = function()
{
#source("R/QPSvmPlus.R")
qp = svmPlus(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .001,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .001,
tol = .00001)
train_features = read.csv("../svm_backup/data/mnistResizedData.csv")
nrow(train_features)
ncol(train_features)
train_Pfeatures = read.csv("../svm_backup/data/mnistData.csv")
nrow(train_Pfeatures)
ncol(train_Pfeatures)
train_labels = read.csv("../svm_backup/data/mnistLabel.csv")
nrow(train_labels)
ncol(train_labels)
X_train = rbind(train_features[1:11, ], train_features[2001:2011, ])
y_train = matrix(c(train_labels[1:11,1], train_labels[2001:2011,1]),
22,1)
XStar = rbind(train_Pfeatures[1:11, ], train_Pfeatures[2001:2011, ])
print(y_train)
X_test = rbind(train_features[101:200, ], train_features[2101:2200, ])
y_test = matrix(c(train_labels[101:200, 1], train_labels[2101:2200, 1]),
200,1)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
y_predict[y_predict == 0] = 1
print(length(y_predict[y_predict == y_test]))
}
demo_mnist()
demo_iris = function()
{
data("iris")
dim(iris)
head(iris)
#let us have 30 observations from each class for training
X_train = rbind(iris[1:30, 1:4],
iris[51:80, 1:4],
iris[101:130, 1:4])
y_train = c(rep(1,30), rep(2,30), rep(3,30))
y_train = matrix(y_train, 90,1)
XStar = diag(90) # Identity matrix as PI
qp = SVMP(cost = 1, gamma = .01,
kernel_x = "rbf", degree_x = 3, gamma_x = .001,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .001,
tol = .00001)
qp$fit(X_train, XStar, y_train)
X_test = rbind(iris[31:50, 1:4],
iris[81:100, 1:4],
iris[131:150, 1:4])
y_test = c(rep(1,20), rep(2,20), rep(3,20))
y_test = matrix(y_test, 60, 1)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 60")
}
demo_iris()
demo_svmplus = function()
{
mean1 = rep(0, 2)
mean2 = rep(1, 2)
cov2  = cov1 = .5 * diag(2)
n = 20
X1 = mvrnorm(n, mean1, Sigma = cov1)
X2 = mvrnorm(n, mean2, Sigma = cov2)
X_train = rbind(X1, X2)
y_train = matrix(c(rep(1, n), rep(-1, n)), 2*n, 1)
X1Star = matrix(0, n, 2)
X2Star = matrix(0, n, 2)
for(i in 1:n)
{
X1Star[i, 1] = norm(X1[i,] - mean1, type = "2")
X1Star[i, 2] = norm(X2[i,] - mean2, type = "2")
}
for(i in 1:n)
{
X2Star[i, 1] = norm(X1[i, ] - mean2, type = "2")
X2Star[i, 2] = norm(X2[i, ] - mean1, type = "2")
}
XStar = rbind(X1Star, X2Star)
n_test = 10
X1 = mvrnorm(n_test, mean1, Sigma = cov1)
X2 = mvrnorm(n_test, mean2, Sigma = cov2)
X_test = rbind(X1, X2)
y_test = matrix(c(rep(1, n_test), rep(-1, n_test)), 2*n_test, 1)
qp = SVMP(cost = 100, gamma = .01,
kernel_x = "rbf", gamma_x = .01,
kernel_xstar = "rbf", gamma_xstar = .01,
tol = .00001)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
print(length(y_predict[y_predict == y_test]))
print("correct classification out of 20")
}
demo_svmplus()
demo_mnist = function()
{
#source("R/QPSvmPlus.R")
qp = SVMP(cost = 1, gamma = 1,
kernel_x = "rbf", degree_x = 3, gamma_x = .001,
kernel_xstar = "rbf", degree_xstar = 3, gamma_xstar = .001,
tol = .00001)
train_features = read.csv("../svm_backup/data/mnistResizedData.csv")
nrow(train_features)
ncol(train_features)
train_Pfeatures = read.csv("../svm_backup/data/mnistData.csv")
nrow(train_Pfeatures)
ncol(train_Pfeatures)
train_labels = read.csv("../svm_backup/data/mnistLabel.csv")
nrow(train_labels)
ncol(train_labels)
X_train = rbind(train_features[1:11, ], train_features[2001:2011, ])
y_train = matrix(c(train_labels[1:11,1], train_labels[2001:2011,1]),
22,1)
XStar = rbind(train_Pfeatures[1:11, ], train_Pfeatures[2001:2011, ])
print(y_train)
X_test = rbind(train_features[101:200, ], train_features[2101:2200, ])
y_test = matrix(c(train_labels[101:200, 1], train_labels[2101:2200, 1]),
200,1)
qp$fit(X_train, XStar, y_train)
y_predict = qp$predict(X_test)
y_predict[y_predict == 0] = 1
print(length(y_predict[y_predict == y_test]))
}
demo_mnist()
library(svmplus)
library(svmplus)
